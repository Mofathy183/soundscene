"""
Django settings for soundscene project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os
from datetime import timedelta

# ───── Define base directory ─────
# BASE_DIR points to the root of the project and is used to construct file paths (e.g., for media, static, env).
BASE_DIR = Path(__file__).resolve().parent.parent

# ───── Load environment variables ─────
# Initialize environment handling using django-environ
env = environ.Env()

# Always load the main .env file (regardless of environment)
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# ───── Django settings ─────
# These are development-only settings; do NOT use as-is in production.
# See: https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Load the Django secret key from the environment for security.
SECRET_KEY = env("DJANGO_SECRET_KEY")

# Set DEBUG mode based on environment; should be False in production.
DEBUG = env("DEBUG", default=False)

# Set allowed hosts; required if DEBUG is False. Read from env or fallback to localhost.
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost"])

# ─────────────── Installed Apps ───────────────
INSTALLED_APPS = [
    # Django built-in apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "corsheaders",  # Handle CORS
    "django_filters",  # Filtering support for DRF and Graphene
    "graphene_django",  # GraphQL integration
    "rest_framework",  # Django REST Framework
    # Local apps
    "users.apps.UsersConfig",  # Custom users app (with AbstractBaseUser)
]

# ─────────────── Middleware ───────────────
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Placed before CommonMiddleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ─────────────── Graphene and JWT Configuration ───────────────
GRAPHENE = {
    "SCHEMA": "gql.schema.schema",  # Root GraphQL schema path
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}

AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",  # Enables JWT auth
    "django.contrib.auth.backends.ModelBackend",  # Required for admin login, etc.
]

# ─────────────── GraphQL JWT Settings ───────────────
GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    # Allow unauthenticated access for login mutation
    "JWT_ALLOW_ANY_CLASSES": [
        "graphql_jwt.views.ObtainJSONWebToken",
    ],
    # Token lifetime
    "JWT_EXPIRATION_DELTA": timedelta(minutes=5),  # Access token expiration
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=7),  # Refresh token expiration
    # Use cookies instead of headers
    "JWT_COOKIE_NAME": "access_token",
    "JWT_REFRESH_TOKEN_COOKIE_NAME": "refresh_token",
    "JWT_COOKIE_SECURE": False,  # Change to True in production (HTTPS only)
    "JWT_COOKIE_HTTPONLY": True,  # Prevent JavaScript access to cookies
    "JWT_COOKIE_SAMESITE": "Strict",  # or "Lax" for less strict CSRF protection
}

# ─────────────── CORS + CSRF ───────────────
# Allow frontend to connect (adjust depending on your frontend host)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:4200",
]

# Allow sending credentials (cookies) with CORS requests
CORS_ALLOW_CREDENTIALS = True

# Allow CSRF from frontend
CSRF_TRUSTED_ORIGINS = ["http://localhost:4200"]

ROOT_URLCONF = "soundscene.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "soundscene.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# ─────────────── Database Configuration ───────────────
# Django DB settings using environment variables for flexibility across local and Docker environments.

# Determine the active environment: 'local' or 'docker'
DJANGO_ENV = env("DJANGO_ENV", default="local")

# Load environment-specific DB variables from a secondary .env file
if DJANGO_ENV == "docker":
    env.read_env(os.path.join(BASE_DIR, ".env.db.docker"))
else:
    env.read_env(os.path.join(BASE_DIR, ".env.db.local"))

# Define the default PostgreSQL database configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("POSTGRES_DB"),  # Database name
        "USER": env("POSTGRES_USER"),  # DB user
        "PASSWORD": env("POSTGRES_PASSWORD"),  # DB password
        "HOST": env("POSTGRES_HOST"),  # Host (Docker service or localhost)
        "PORT": env("POSTGRES_PORT", default="5432"),  # Default PostgreSQL port
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# ─────────────── Media Files (User Uploads) ───────────────
# MEDIA_URL: The public URL path used to access uploaded media files.
# MEDIA_ROOT: The filesystem path where uploaded files (e.g. avatars) are stored.
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ─────────────── Custom User Model ───────────────
# Use a custom user model that extends AbstractBaseUser and PermissionsMixin.
# This allows for full control over user authentication, fields, and permissions.
AUTH_USER_MODEL = "users.User"
