# Generated by Django 5.2.4 on 2025-07-26 11:45

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import users.utility
import users.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Primary key: Unique user ID as UUID",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="User's unique email address",
                        max_length=254,
                        unique=True,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Enter a valid email address (e.g., user@example.com)."
                            )
                        ],
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Unique username for login and display",
                        max_length=30,
                        unique=True,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                3,
                                message="Username must be at least 3 characters long.",
                            ),
                            django.core.validators.MaxLengthValidator(
                                30, message="Username cannot exceed 30 characters."
                            ),
                            django.core.validators.RegexValidator(
                                message="Username must start with a letter and can contain letters, numbers, underscores (_), hyphens (-), and dots (.), without consecutive or trailing special characters.",
                                regex="^[a-zA-Z][a-zA-Z0-9._-]+$",
                            ),
                        ],
                        verbose_name="Username",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="User's full display name",
                        max_length=50,
                        validators=[
                            users.validators.validate_name_strip_whitespace,
                            django.core.validators.MinLengthValidator(
                                2, message="Name must be at least 2 characters."
                            ),
                            django.core.validators.MaxLengthValidator(
                                50, message="Name cannot exceed 50 characters."
                            ),
                            django.core.validators.RegexValidator(
                                message="Name can only contain letters, spaces, hyphens (-) and apostrophes (').",
                                regex="^[A-Za-zÀ-ÖØ-öø-ÿ\\s'-]+$",
                            ),
                        ],
                        verbose_name="Full Name",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        help_text="Hashed user password",
                        max_length=100,
                        verbose_name="Password",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("creator", "Creator"),
                            ("reviewer", "Reviewer"),
                            ("moderator", "Moderator"),
                            ("admin", "Admin"),
                        ],
                        default="user",
                        help_text="Role assigned to the user",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Set to False to deactivate the account instead of deleting it",
                        verbose_name="Active",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can access the admin site",
                        verbose_name="Staff Status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Timestamp when the user joined",
                        verbose_name="Date Joined",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp of user creation",
                        null=True,
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp of last update",
                        null=True,
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
                "ordering": ["-created_at", "-id"],
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Universally unique identifier for the profile.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="A short personal description or introduction.",
                        validators=[
                            users.validators.validate_bio,
                            users.validators.validate_bio_not_numeric_only,
                        ],
                        verbose_name="Biography",
                    ),
                ),
                (
                    "birthday_date",
                    models.DateField(
                        blank=True,
                        help_text="User's date of birth (optional).",
                        null=True,
                        validators=[
                            users.validators.validate_birthday,
                            users.validators.validate_age_range,
                        ],
                        verbose_name="Birthday",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Optional user profile image (JPG, PNG).",
                        null=True,
                        upload_to=users.utility.profile_avatar_path,
                        validators=[
                            users.validators.validate_image_size,
                            users.validators.validate_image_extension,
                        ],
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the profile was created.",
                        null=True,
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the profile was last updated.",
                        null=True,
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="The user associated with this profile.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Profile",
                "verbose_name_plural": "Profiles",
                "db_table": "profile",
                "ordering": ["-created_at", "id"],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["name", "id"], name="users_name_1d1591_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email", "id"], name="users_email_774c93_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["username", "id"], name="users_usernam_6f1bb5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["created_at", "id"], name="users_created_1b562c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="profile",
            index=models.Index(
                fields=["created_at", "id"], name="profile_created_4d70eb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="profile",
            index=models.Index(
                fields=["birthday_date", "id"], name="profile_birthda_d0b00a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="profile",
            index=models.Index(
                fields=["updated_at", "id"], name="profile_updated_832c6e_idx"
            ),
        ),
    ]
